package main

import (
	"reflect"
	"testing"
)

func TestBoundFill(t *testing.T) {

	board := [][]string{
		{"6", "6", "6", "6", "6", "6"},
		{"3", "3", "3", "_", "2", "2"},
		{"1", "_", "8", "8", "3", "3"},
		{"4", "4", "8", "8", "_", "3"},
		{"4", "4", "_", "1", "2", "2"},
		{"6", "6", "6", "6", "6", "6"}}

	solution := [][]string{
		{"6", "6", "6", "6", "6", "6"},
		{"3", "3", "3", "8", "2", "2"},
		{"1", "8", "8", "8", "3", "3"},
		{"4", "4", "8", "8", "8", "3"},
		{"4", "4", "8", "1", "2", "2"},
		{"6", "6", "6", "6", "6", "6"}}

	solvedBoard := solve(board)

	if !reflect.DeepEqual(solvedBoard, solution) {
		t.Error("Oh Noes the puzzle isn't solved")
	}
}

func TestSolveBoard1(t *testing.T) {

	board := [][]string{
		{"8", "_", "1", "_", "_", "_", "1", "_", "_", "_"},
		{"2", "_", "_", "_", "1", "_", "2", "6", "5", "_"},
		{"_", "4", "2", "1", "_", "_", "_", "7", "_", "_"},
		{"_", "_", "_", "_", "_", "_", "2", "_", "_", "1"},
		{"_", "3", "_", "_", "4", "_", "_", "_", "1", "4"},
		{"2", "2", "_", "_", "_", "1", "_", "_", "4", "_"},
		{"1", "_", "_", "3", "_", "_", "_", "_", "_", "_"},
		{"_", "_", "3", "_", "_", "_", "1", "6", "2", "_"},
		{"_", "2", "2", "1", "_", "3", "_", "_", "_", "3"},
		{"_", "_", "_", "8", "_", "_", "_", "6", "_", "5"}}

	solution := [][]string{
		{"8", "8", "1", "8", "8", "8", "1", "6", "6", "6"},
		{"2", "8", "8", "8", "1", "2", "2", "6", "5", "6"},
		{"2", "4", "2", "1", "7", "7", "7", "7", "5", "6"},
		{"4", "4", "2", "7", "7", "2", "2", "5", "5", "1"},
		{"4", "3", "3", "7", "4", "6", "6", "5", "1", "4"},
		{"2", "2", "3", "4", "4", "1", "6", "4", "4", "4"},
		{"1", "8", "1", "3", "4", "3", "6", "6", "2", "3"},
		{"8", "8", "3", "3", "6", "3", "1", "6", "2", "3"},
		{"8", "2", "2", "1", "6", "3", "5", "5", "5", "3"},
		{"8", "8", "8", "8", "6", "6", "6", "6", "5", "5"}}

	solvedBoard := solve(board)

	if !reflect.DeepEqual(solvedBoard, solution) {
		t.Error("Oh Noes the puzzle isn't solved")
	}
}

func TestSolveBoard2(t *testing.T) {

	board := [][]string{
		{"5", "6", "_", "_", "_", "6", "6", "_", "_", "7"},
		{"5", "_", "_", "_", "_", "6", "1", "_", "_", "2"},
		{"_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
		{"5", "5", "_", "_", "_", "6", "_", "1", "_", "_"},
		{"5", "3", "_", "6", "_", "_", "_", "_", "_", "_"},
		{"_", "_", "_", "_", "_", "_", "6", "_", "7", "1"},
		{"_", "_", "3", "_", "2", "_", "_", "_", "7", "5"},
		{"_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
		{"4", "_", "_", "6", "5", "_", "_", "_", "_", "1"},
		{"4", "_", "_", "4", "5", "_", "_", "_", "5", "5"}}

	solution := [][]string{
		{"5", "6", "6", "6", "2", "6", "6", "6", "7", "7"},
		{"5", "5", "5", "6", "2", "6", "1", "6", "7", "2"},
		{"2", "2", "5", "6", "6", "1", "7", "6", "7", "2"},
		{"5", "5", "3", "2", "2", "6", "7", "1", "7", "7"},
		{"5", "3", "3", "6", "1", "6", "7", "7", "1", "7"},
		{"5", "5", "6", "6", "2", "6", "6", "7", "7", "1"},
		{"4", "3", "3", "6", "2", "5", "6", "5", "7", "5"},
		{"4", "3", "4", "6", "5", "5", "6", "5", "5", "5"},
		{"4", "2", "4", "6", "5", "2", "5", "2", "2", "1"},
		{"4", "1", "4", "4", "5", "2", "5", "5", "5", "5"}}
	solvedBoard := solve(board)

	if !reflect.DeepEqual(solvedBoard, solution) {
		t.Error("Oh Noes the puzzle isn't solved")
	}
}

func TestSolveBoard3(t *testing.T) {
	board := [][]string{
		{"1", "_", "_", "4", "_", "_", "4", "_", "_", "3"},
		{"2", "_", "_", "2", "_", "_", "2", "_", "_", "4"},
		{"3", "_", "_", "3", "_", "_", "4", "_", "_", "1"},
		{"6", "_", "_", "6", "_", "_", "2", "_", "_", "5"},
		{"_", "4", "_", "_", "1", "_", "_", "5", "_", "_"},
		{"_", "_", "4", "_", "_", "5", "_", "_", "3", "_"},
		{"4", "_", "_", "6", "_", "_", "6", "_", "_", "3"},
		{"4", "_", "_", "4", "_", "_", "5", "_", "_", "1"},
		{"4", "_", "_", "3", "_", "_", "3", "_", "_", "3"},
		{"6", "_", "_", "6", "_", "_", "6", "_", "_", "2"}}

	solution := [][]string{
		{"1", "3", "3", "4", "4", "4", "4", "3", "3", "3"},
		{"2", "2", "3", "2", "2", "1", "2", "2", "4", "4"},
		{"3", "3", "6", "3", "3", "4", "4", "1", "4", "1"},
		{"6", "3", "6", "6", "3", "4", "2", "5", "4", "5"},
		{"6", "4", "4", "6", "1", "4", "2", "5", "5", "5"},
		{"6", "6", "4", "6", "4", "5", "5", "1", "3", "3"},
		{"4", "6", "4", "6", "4", "5", "6", "6", "1", "3"},
		{"4", "6", "3", "4", "4", "5", "5", "6", "3", "1"},
		{"4", "4", "3", "3", "6", "3", "3", "6", "3", "3"},
		{"6", "6", "6", "6", "6", "3", "6", "6", "2", "2"}}

	solvedBoard := solve(board)

	if !reflect.DeepEqual(solvedBoard, solution) {
		t.Error("Oh Noes the puzzle isn't solved")
	}
}

func TestSolveBoard5(t *testing.T) {
	board := [][]string{
		{"4", "4", "_", "_", "_", "_", "_", "_", "_", "_"},
		{"3", "3", "_", "_", "4", "4", "_", "_", "_", "_"},
		{"2", "4", "_", "_", "3", "2", "_", "_", "2", "4"},
		{"_", "_", "_", "_", "4", "4", "_", "_", "4", "3"},
		{"_", "_", "_", "_", "_", "_", "_", "_", "1", "3"},
		{"3", "4", "_", "_", "_", "_", "_", "_", "_", "_"},
		{"1", "2", "_", "_", "2", "4", "_", "_", "_", "_"},
		{"4", "3", "_", "_", "3", "2", "_", "_", "2", "3"},
		{"_", "_", "_", "_", "4", "3", "_", "_", "3", "3"},
		{"_", "_", "_", "_", "_", "_", "_", "_", "4", "4"}}

	solution := [][]string{
		{"4", "4", "4", "4", "1", "4", "4", "1", "4", "4"},
		{"3", "3", "3", "1", "4", "4", "1", "4", "2", "4"},
		{"2", "4", "4", "3", "3", "2", "2", "4", "2", "4"},
		{"2", "4", "4", "3", "4", "4", "1", "4", "4", "3"},
		{"3", "3", "1", "4", "1", "4", "4", "5", "1", "3"},
		{"3", "4", "4", "4", "2", "5", "5", "5", "5", "3"},
		{"1", "2", "2", "3", "2", "4", "4", "4", "2", "1"},
		{"4", "3", "1", "3", "3", "2", "2", "4", "2", "3"},
		{"4", "3", "3", "4", "4", "3", "3", "1", "3", "3"},
		{"4", "4", "1", "4", "4", "3", "4", "4", "4", "4"}}

	solvedBoard := solve(board)

	if !reflect.DeepEqual(solvedBoard, solution) {
		t.Error("Oh Noes the puzzle isn't solved")
	}
}

/*  // 6x6 blank

{"_", "_", "_", "_", "_", "_"},
{"_", "_", "_", "_", "_", "_"},
{"_", "_", "_", "_", "_", "_"},
{"_", "_", "_", "_", "_", "_"},
{"_", "_", "_", "_", "_", "_"},
{"_", "_", "_", "_", "_", "_"}}
*/
